// src/flow.lark

?start: statement+
?statement: schema_decl | source_decl | sink_decl | assignment | execution

schema_decl: "schema" NAME "{" (field_decl)* "}"
field_decl:  NAME ":" TYPE ";"
TYPE: "string" | "int" | "float" | "bool"

source_decl: "source" NAME "<-" function_call ("using" NAME)? ";"
sink_decl:   "sink" NAME "->" function_call ";"

assignment: NAME "=" pipeline ";"
execution:  pipeline ";"
pipeline: NAME (pipe_step)*
pipe_step: "->" (transformation | NAME)

// --- TRANSFORMATIONS & EXPRESSIONS ---
transformation: filter | select | sort | mutate
filter: "filter" "(" bool_expression ")"
select: "select" "(" NAME ("," NAME)* ")"
sort:   "sort" "(" NAME ("," NAME)* ("," "order" ":" STRING)? ")"
mutate: "mutate" "(" mutate_expr ("," mutate_expr)* ")"

// UPDATED: These rules now use named terminals for operators
bool_expression: arith_expr (BOOL_OPERATOR arith_expr)*
?arith_expr: term ((PLUS | MINUS) term)*
?term: factor ((STAR | SLASH) factor)*
?factor: (SIGNED_NUMBER | STRING | column_ref | "(" arith_expr ")")

column_ref: NAME "." NAME
mutate_expr: NAME "=" arith_expr

BOOL_OPERATOR: ">" | "<" | "==" | "!="
function_call: NAME "(" arguments? ")"
env_var: "env" "(" STRING ")"
?arguments: (NAME ":" (STRING | SIGNED_NUMBER | env_var) ("," NAME ":" (STRING | SIGNED_NUMBER | env_var))*)

// --- TERMINALS (UPDATED) ---
NAME:   /[a-zA-Z_]\w*/
STRING: /"[^"]*"|'[^']*'/
COMMENT: /\/\/[^\n]*/
AND:    "and"
OR:     "or"
PLUS:   "+"
MINUS:  "-"
STAR:   "*"
SLASH:  "/"

// --- IGNORE RULES ---
%import common.WS
%import common.SIGNED_NUMBER
%ignore WS
%ignore COMMENT